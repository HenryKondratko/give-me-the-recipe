{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _HTTPRequest_instances, _HTTPRequest_client, _HTTPRequest_isNavigationRequest, _HTTPRequest_allowInterception, _HTTPRequest_interceptionHandled, _HTTPRequest_url, _HTTPRequest_resourceType, _HTTPRequest_method, _HTTPRequest_postData, _HTTPRequest_headers, _HTTPRequest_frame, _HTTPRequest_continueRequestOverrides, _HTTPRequest_responseForRequest, _HTTPRequest_abortErrorReason, _HTTPRequest_interceptResolutionState, _HTTPRequest_interceptHandlers, _HTTPRequest_initiator, _HTTPRequest_continue, _HTTPRequest_respond, _HTTPRequest_abort;\nimport { headersArray, HTTPRequest as BaseHTTPRequest, InterceptResolutionAction, STATUS_TEXTS } from '../api/HTTPRequest.js';\nimport { assert } from '../util/assert.js';\nimport { debugError, isString } from './util.js';\n/**\n * @internal\n */\nexport class HTTPRequest extends BaseHTTPRequest {\n  get client() {\n    return __classPrivateFieldGet(this, _HTTPRequest_client, \"f\");\n  }\n  constructor(client, frame, interceptionId, allowInterception, event, redirectChain) {\n    super();\n    _HTTPRequest_instances.add(this);\n    this._failureText = null;\n    this._response = null;\n    this._fromMemoryCache = false;\n    _HTTPRequest_client.set(this, void 0);\n    _HTTPRequest_isNavigationRequest.set(this, void 0);\n    _HTTPRequest_allowInterception.set(this, void 0);\n    _HTTPRequest_interceptionHandled.set(this, false);\n    _HTTPRequest_url.set(this, void 0);\n    _HTTPRequest_resourceType.set(this, void 0);\n    _HTTPRequest_method.set(this, void 0);\n    _HTTPRequest_postData.set(this, void 0);\n    _HTTPRequest_headers.set(this, {});\n    _HTTPRequest_frame.set(this, void 0);\n    _HTTPRequest_continueRequestOverrides.set(this, void 0);\n    _HTTPRequest_responseForRequest.set(this, null);\n    _HTTPRequest_abortErrorReason.set(this, null);\n    _HTTPRequest_interceptResolutionState.set(this, {\n      action: InterceptResolutionAction.None\n    });\n    _HTTPRequest_interceptHandlers.set(this, void 0);\n    _HTTPRequest_initiator.set(this, void 0);\n    __classPrivateFieldSet(this, _HTTPRequest_client, client, \"f\");\n    this._requestId = event.requestId;\n    __classPrivateFieldSet(this, _HTTPRequest_isNavigationRequest, event.requestId === event.loaderId && event.type === 'Document', \"f\");\n    this._interceptionId = interceptionId;\n    __classPrivateFieldSet(this, _HTTPRequest_allowInterception, allowInterception, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_url, event.request.url, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_resourceType, (event.type || 'other').toLowerCase(), \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_method, event.request.method, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_postData, event.request.postData, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_frame, frame, \"f\");\n    this._redirectChain = redirectChain;\n    __classPrivateFieldSet(this, _HTTPRequest_continueRequestOverrides, {}, \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_interceptHandlers, [], \"f\");\n    __classPrivateFieldSet(this, _HTTPRequest_initiator, event.initiator, \"f\");\n    for (const [key, value] of Object.entries(event.request.headers)) {\n      __classPrivateFieldGet(this, _HTTPRequest_headers, \"f\")[key.toLowerCase()] = value;\n    }\n  }\n  url() {\n    return __classPrivateFieldGet(this, _HTTPRequest_url, \"f\");\n  }\n  continueRequestOverrides() {\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    return __classPrivateFieldGet(this, _HTTPRequest_continueRequestOverrides, \"f\");\n  }\n  responseForRequest() {\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    return __classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\");\n  }\n  abortErrorReason() {\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    return __classPrivateFieldGet(this, _HTTPRequest_abortErrorReason, \"f\");\n  }\n  interceptResolutionState() {\n    if (!__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\")) {\n      return {\n        action: InterceptResolutionAction.Disabled\n      };\n    }\n    if (__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\")) {\n      return {\n        action: InterceptResolutionAction.AlreadyHandled\n      };\n    }\n    return {\n      ...__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\")\n    };\n  }\n  isInterceptResolutionHandled() {\n    return __classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\");\n  }\n  enqueueInterceptAction(pendingHandler) {\n    __classPrivateFieldGet(this, _HTTPRequest_interceptHandlers, \"f\").push(pendingHandler);\n  }\n  async finalizeInterceptions() {\n    await __classPrivateFieldGet(this, _HTTPRequest_interceptHandlers, \"f\").reduce((promiseChain, interceptAction) => {\n      return promiseChain.then(interceptAction);\n    }, Promise.resolve());\n    const {\n      action\n    } = this.interceptResolutionState();\n    switch (action) {\n      case 'abort':\n        return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_abort).call(this, __classPrivateFieldGet(this, _HTTPRequest_abortErrorReason, \"f\"));\n      case 'respond':\n        if (__classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\") === null) {\n          throw new Error('Response is missing for the interception');\n        }\n        return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_respond).call(this, __classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\"));\n      case 'continue':\n        return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_continue).call(this, __classPrivateFieldGet(this, _HTTPRequest_continueRequestOverrides, \"f\"));\n    }\n  }\n  resourceType() {\n    return __classPrivateFieldGet(this, _HTTPRequest_resourceType, \"f\");\n  }\n  method() {\n    return __classPrivateFieldGet(this, _HTTPRequest_method, \"f\");\n  }\n  postData() {\n    return __classPrivateFieldGet(this, _HTTPRequest_postData, \"f\");\n  }\n  headers() {\n    return __classPrivateFieldGet(this, _HTTPRequest_headers, \"f\");\n  }\n  response() {\n    return this._response;\n  }\n  frame() {\n    return __classPrivateFieldGet(this, _HTTPRequest_frame, \"f\");\n  }\n  isNavigationRequest() {\n    return __classPrivateFieldGet(this, _HTTPRequest_isNavigationRequest, \"f\");\n  }\n  initiator() {\n    return __classPrivateFieldGet(this, _HTTPRequest_initiator, \"f\");\n  }\n  redirectChain() {\n    return this._redirectChain.slice();\n  }\n  /**\n   * Access information about the request's failure.\n   *\n   * @remarks\n   *\n   * @example\n   *\n   * Example of logging all failed requests:\n   *\n   * ```ts\n   * page.on('requestfailed', request => {\n   *   console.log(request.url() + ' ' + request.failure().errorText);\n   * });\n   * ```\n   *\n   * @returns `null` unless the request failed. If the request fails this can\n   * return an object with `errorText` containing a human-readable error\n   * message, e.g. `net::ERR_FAILED`. It is not guaranteed that there will be\n   * failure text if the request fails.\n   */\n  failure() {\n    if (!this._failureText) {\n      return null;\n    }\n    return {\n      errorText: this._failureText\n    };\n  }\n  /**\n   * Continues request with optional request overrides.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   *\n   * ```ts\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   // Override headers\n   *   const headers = Object.assign({}, request.headers(), {\n   *     foo: 'bar', // set \"foo\" header\n   *     origin: undefined, // remove \"origin\" header\n   *   });\n   *   request.continue({headers});\n   * });\n   * ```\n   *\n   * @param overrides - optional overrides to apply to the request.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n  async continue() {\n    let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let priority = arguments.length > 1 ? arguments[1] : undefined;\n    // Request interception is not supported for data: urls.\n    if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n      return;\n    }\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    assert(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n    if (priority === undefined) {\n      return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_continue).call(this, overrides);\n    }\n    __classPrivateFieldSet(this, _HTTPRequest_continueRequestOverrides, overrides, \"f\");\n    if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined || priority > __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n      __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n        action: InterceptResolutionAction.Continue,\n        priority\n      }, \"f\");\n      return;\n    }\n    if (priority === __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n      if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'abort' || __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'respond') {\n        return;\n      }\n      __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action = InterceptResolutionAction.Continue;\n    }\n    return;\n  }\n  async respond(response, priority) {\n    // Mocking responses for dataURL requests is not currently supported.\n    if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n      return;\n    }\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    assert(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n    if (priority === undefined) {\n      return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_respond).call(this, response);\n    }\n    __classPrivateFieldSet(this, _HTTPRequest_responseForRequest, response, \"f\");\n    if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined || priority > __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n      __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n        action: InterceptResolutionAction.Respond,\n        priority\n      }, \"f\");\n      return;\n    }\n    if (priority === __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n      if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'abort') {\n        return;\n      }\n      __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action = InterceptResolutionAction.Respond;\n    }\n  }\n  async abort() {\n    let errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'failed';\n    let priority = arguments.length > 1 ? arguments[1] : undefined;\n    // Request interception is not supported for data: urls.\n    if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n      return;\n    }\n    const errorReason = errorReasons[errorCode];\n    assert(errorReason, 'Unknown error code: ' + errorCode);\n    assert(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n    assert(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n    if (priority === undefined) {\n      return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_abort).call(this, errorReason);\n    }\n    __classPrivateFieldSet(this, _HTTPRequest_abortErrorReason, errorReason, \"f\");\n    if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined || priority >= __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n      __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n        action: InterceptResolutionAction.Abort,\n        priority\n      }, \"f\");\n      return;\n    }\n  }\n}\n_HTTPRequest_client = new WeakMap(), _HTTPRequest_isNavigationRequest = new WeakMap(), _HTTPRequest_allowInterception = new WeakMap(), _HTTPRequest_interceptionHandled = new WeakMap(), _HTTPRequest_url = new WeakMap(), _HTTPRequest_resourceType = new WeakMap(), _HTTPRequest_method = new WeakMap(), _HTTPRequest_postData = new WeakMap(), _HTTPRequest_headers = new WeakMap(), _HTTPRequest_frame = new WeakMap(), _HTTPRequest_continueRequestOverrides = new WeakMap(), _HTTPRequest_responseForRequest = new WeakMap(), _HTTPRequest_abortErrorReason = new WeakMap(), _HTTPRequest_interceptResolutionState = new WeakMap(), _HTTPRequest_interceptHandlers = new WeakMap(), _HTTPRequest_initiator = new WeakMap(), _HTTPRequest_instances = new WeakSet(), _HTTPRequest_continue = async function _HTTPRequest_continue() {\n  let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    url,\n    method,\n    postData,\n    headers\n  } = overrides;\n  __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n  const postDataBinaryBase64 = postData ? Buffer.from(postData).toString('base64') : undefined;\n  if (this._interceptionId === undefined) {\n    throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.continueRequest');\n  }\n  await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\").send('Fetch.continueRequest', {\n    requestId: this._interceptionId,\n    url,\n    method,\n    postData: postDataBinaryBase64,\n    headers: headers ? headersArray(headers) : undefined\n  }).catch(error => {\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, false, \"f\");\n    return handleError(error);\n  });\n}, _HTTPRequest_respond = async function _HTTPRequest_respond(response) {\n  __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n  const responseBody = response.body && isString(response.body) ? Buffer.from(response.body) : response.body || null;\n  const responseHeaders = {};\n  if (response.headers) {\n    for (const header of Object.keys(response.headers)) {\n      const value = response.headers[header];\n      responseHeaders[header.toLowerCase()] = Array.isArray(value) ? value.map(item => {\n        return String(item);\n      }) : String(value);\n    }\n  }\n  if (response.contentType) {\n    responseHeaders['content-type'] = response.contentType;\n  }\n  if (responseBody && !('content-length' in responseHeaders)) {\n    responseHeaders['content-length'] = String(Buffer.byteLength(responseBody));\n  }\n  const status = response.status || 200;\n  if (this._interceptionId === undefined) {\n    throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.fulfillRequest');\n  }\n  await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\").send('Fetch.fulfillRequest', {\n    requestId: this._interceptionId,\n    responseCode: status,\n    responsePhrase: STATUS_TEXTS[status],\n    responseHeaders: headersArray(responseHeaders),\n    body: responseBody ? responseBody.toString('base64') : undefined\n  }).catch(error => {\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, false, \"f\");\n    return handleError(error);\n  });\n}, _HTTPRequest_abort = async function _HTTPRequest_abort(errorReason) {\n  __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n  if (this._interceptionId === undefined) {\n    throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.failRequest');\n  }\n  await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\").send('Fetch.failRequest', {\n    requestId: this._interceptionId,\n    errorReason: errorReason || 'Failed'\n  }).catch(handleError);\n};\nconst errorReasons = {\n  aborted: 'Aborted',\n  accessdenied: 'AccessDenied',\n  addressunreachable: 'AddressUnreachable',\n  blockedbyclient: 'BlockedByClient',\n  blockedbyresponse: 'BlockedByResponse',\n  connectionaborted: 'ConnectionAborted',\n  connectionclosed: 'ConnectionClosed',\n  connectionfailed: 'ConnectionFailed',\n  connectionrefused: 'ConnectionRefused',\n  connectionreset: 'ConnectionReset',\n  internetdisconnected: 'InternetDisconnected',\n  namenotresolved: 'NameNotResolved',\n  timedout: 'TimedOut',\n  failed: 'Failed'\n};\nasync function handleError(error) {\n  if (['Invalid header'].includes(error.originalMessage)) {\n    throw error;\n  }\n  // In certain cases, protocol will return error if the request was\n  // already canceled or the page was closed. We should tolerate these\n  // errors.\n  debugError(error);\n}","map":{"version":3,"names":["headersArray","HTTPRequest","BaseHTTPRequest","InterceptResolutionAction","STATUS_TEXTS","assert","debugError","isString","client","__classPrivateFieldGet","_HTTPRequest_client","constructor","frame","interceptionId","allowInterception","event","redirectChain","_failureText","_response","_fromMemoryCache","set","_HTTPRequest_isNavigationRequest","_HTTPRequest_allowInterception","_HTTPRequest_interceptionHandled","_HTTPRequest_url","_HTTPRequest_resourceType","_HTTPRequest_method","_HTTPRequest_postData","_HTTPRequest_headers","_HTTPRequest_frame","_HTTPRequest_continueRequestOverrides","_HTTPRequest_responseForRequest","_HTTPRequest_abortErrorReason","_HTTPRequest_interceptResolutionState","action","None","_HTTPRequest_interceptHandlers","_HTTPRequest_initiator","__classPrivateFieldSet","_requestId","requestId","loaderId","type","_interceptionId","request","url","toLowerCase","method","postData","_redirectChain","initiator","key","value","Object","entries","headers","continueRequestOverrides","responseForRequest","abortErrorReason","interceptResolutionState","Disabled","AlreadyHandled","isInterceptResolutionHandled","enqueueInterceptAction","pendingHandler","push","finalizeInterceptions","reduce","promiseChain","interceptAction","then","Promise","resolve","_HTTPRequest_instances","_HTTPRequest_abort","call","Error","_HTTPRequest_respond","_HTTPRequest_continue","resourceType","response","isNavigationRequest","slice","failure","errorText","continue","overrides","arguments","length","undefined","priority","startsWith","Continue","respond","Respond","abort","errorCode","errorReason","errorReasons","Abort","postDataBinaryBase64","Buffer","from","toString","send","catch","error","handleError","responseBody","body","responseHeaders","header","keys","Array","isArray","map","item","String","contentType","byteLength","status","responseCode","responsePhrase","aborted","accessdenied","addressunreachable","blockedbyclient","blockedbyresponse","connectionaborted","connectionclosed","connectionfailed","connectionrefused","connectionreset","internetdisconnected","namenotresolved","timedout","failed","includes","originalMessage"],"sources":["../../../../src/common/HTTPRequest.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}