{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_BATCH_SIZE = 20;\n/**\n * This will transpose an iterator JSHandle into a fast, Puppeteer-side iterator\n * of JSHandles.\n *\n * @param size - The number of elements to transpose. This should be something\n * reasonable.\n */\nfunction fastTransposeIteratorHandle(iterator) {\n  try {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_BATCH_SIZE;\n    return async function* () {\n      const array = await iterator.evaluateHandle(async (iterator, size) => {\n        const results = [];\n        while (results.length < size) {\n          const result = await iterator.next();\n          if (result.done) {\n            break;\n          }\n          results.push(result.value);\n        }\n        return results;\n      }, size);\n      const properties = await array.getProperties();\n      await array.dispose();\n      yield* properties.values();\n      return properties.size === 0;\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * This will transpose an iterator JSHandle in batches based on the default size\n * of {@link fastTransposeIteratorHandle}.\n */\nasync function* transposeIteratorHandle(iterator) {\n  try {\n    while (!(yield* fastTransposeIteratorHandle(iterator))) {}\n  } finally {\n    await iterator.dispose();\n  }\n}\n/**\n * @internal\n */\nexport async function* transposeIterableHandle(handle) {\n  yield* transposeIteratorHandle(await handle.evaluateHandle(iterable => {\n    return async function* () {\n      yield* iterable;\n    }();\n  }));\n}","map":{"version":3,"names":["DEFAULT_BATCH_SIZE","fastTransposeIteratorHandle","iterator","size","arguments","length","undefined","array","evaluateHandle","results","result","next","done","push","value","properties","getProperties","dispose","values","e","Promise","reject","transposeIteratorHandle","transposeIterableHandle","handle","iterable"],"sources":["../../../../src/common/HandleIterator.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAoBA,MAAMA,kBAAkB,GAAG,EAAE;AAE7B;;;;;;;AAOA,SAAgBC,2BAA2BA,CACzCC,QAAwC;EAAA;IAAA,IACxCC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGJ,kBAAkB;IAAA;MAEzB,MAAMO,KAAK,GAAG,MAAML,QAAQ,CAACM,cAAc,CAAC,OAAON,QAAQ,EAAEC,IAAI,KAAI;QACnE,MAAMM,OAAO,GAAG,EAAE;QAClB,OAAOA,OAAO,CAACJ,MAAM,GAAGF,IAAI,EAAE;UAC5B,MAAMO,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;UACpC,IAAID,MAAM,CAACE,IAAI,EAAE;YACf;;UAEFH,OAAO,CAACI,IAAI,CAACH,MAAM,CAACI,KAAK,CAAC;;QAE5B,OAAOL,OAAO;MAChB,CAAC,EAAEN,IAAI,CAAC;MACR,MAAMY,UAAU,GAAI,MAAMR,KAAK,CAACS,aAAa,EAAgC;MAC7E,MAAMT,KAAK,CAACU,OAAO,EAAE;MACrB,OAAOF,UAAU,CAACG,MAAM,EAAE;MAC1B,OAAOH,UAAU,CAACZ,IAAI,KAAK,CAAC;IAC9B,CAAC;EAAA,SAAAgB,CAAA;IAAA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,CAAA;EAAA;AAAA;AAED;;;;AAKA,gBAAgBG,uBAAuBA,CACrCpB,QAAwC;EAExC,IAAI;IACF,OAAO,EAAE,OAAOD,2BAA2B,CAACC,QAAQ,CAAC,CAAC,EAAE;GACzD,SAAS;IACR,MAAMA,QAAQ,CAACe,OAAO,EAAE;;AAE5B;AAIA;;;AAGA,OAAO,gBAAgBM,uBAAuBA,CAC5CC,MAAsC;EAEtC,OAAOF,uBAAuB,CAC5B,MAAME,MAAM,CAAChB,cAAc,CAACiB,QAAQ,IAAG;IACrC,OAAQ,mBAAe;MACrB,OAAOA,QAAQ;IACjB,CAAC,EAAG;EACN,CAAC,CAAC,CACH;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}