{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Keyboard_instances, _Keyboard_client, _Keyboard_pressedKeys, _Keyboard_modifierBit, _Keyboard_keyDescriptionForString, _Mouse_client, _Mouse_keyboard, _Mouse_x, _Mouse_y, _Mouse_button, _Touchscreen_client, _Touchscreen_keyboard;\nimport { assert } from '../util/assert.js';\nimport { _keyDefinitions } from './USKeyboardLayout.js';\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On macOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n *\n * ```ts\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n *\n * ```ts\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nexport class Keyboard {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    _Keyboard_instances.add(this);\n    _Keyboard_client.set(this, void 0);\n    _Keyboard_pressedKeys.set(this, new Set());\n    /**\n     * @internal\n     */\n    this._modifiers = 0;\n    __classPrivateFieldSet(this, _Keyboard_client, client, \"f\");\n  }\n  /**\n   * Dispatches a `keydown` event.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n   * subsequent key presses will be sent with that modifier active.\n   * To release the modifier key, use {@link Keyboard.up}.\n   *\n   * After the key is pressed once, subsequent calls to\n   * {@link Keyboard.down} will have\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n   * set to true. To release the key, use {@link Keyboard.up}.\n   *\n   * Modifier keys DO influence {@link Keyboard.down}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts commands which, if specified,\n   * is the commands of keyboard shortcuts,\n   * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n   */\n  async down(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      text: undefined,\n      commands: []\n    };\n    const description = __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(this, key);\n    const autoRepeat = __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").has(description.code);\n    __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").add(description.code);\n    this._modifiers |= __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(this, description.key);\n    const text = options.text === undefined ? description.text : options.text;\n    await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n      type: text ? 'keyDown' : 'rawKeyDown',\n      modifiers: this._modifiers,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      key: description.key,\n      text: text,\n      unmodifiedText: text,\n      autoRepeat,\n      location: description.location,\n      isKeypad: description.location === 3,\n      commands: options.commands\n    });\n  }\n  /**\n   * Dispatches a `keyup` event.\n   *\n   * @param key - Name of key to release, such as `ArrowLeft`.\n   * See {@link KeyInput | KeyInput}\n   * for a list of all key names.\n   */\n  async up(key) {\n    const description = __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(this, key);\n    this._modifiers &= ~__classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(this, description.key);\n    __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").delete(description.code);\n    await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: this._modifiers,\n      key: description.key,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      location: description.location\n    });\n  }\n  /**\n   * Dispatches a `keypress` and `input` event.\n   * This does not send a `keydown` or `keyup` event.\n   *\n   * @remarks\n   * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   *\n   * ```ts\n   * page.keyboard.sendCharacter('嗨');\n   * ```\n   *\n   * @param char - Character to send into the page.\n   */\n  async sendCharacter(char) {\n    await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.insertText', {\n      text: char\n    });\n  }\n  charIsKey(char) {\n    return !!_keyDefinitions[char];\n  }\n  /**\n   * Sends a `keydown`, `keypress`/`input`,\n   * and `keyup` event for each character in the text.\n   *\n   * @remarks\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link Keyboard.press}.\n   *\n   * Modifier keys DO NOT effect `keyboard.type`.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   *\n   * ```ts\n   * await page.keyboard.type('Hello'); // Types instantly\n   * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @param text - A text to type into a focused element.\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n  async type(text) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const delay = options.delay || undefined;\n    for (const char of text) {\n      if (this.charIsKey(char)) {\n        await this.press(char, {\n          delay\n        });\n      } else {\n        if (delay) {\n          await new Promise(f => {\n            return setTimeout(f, delay);\n          });\n        }\n        await this.sendCharacter(char);\n      }\n    }\n  }\n  /**\n   * Shortcut for {@link Keyboard.down}\n   * and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * Modifier keys DO effect {@link Keyboard.press}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0. Accepts commands which, if specified,\n   * is the commands of keyboard shortcuts,\n   * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n   */\n  async press(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      delay = null\n    } = options;\n    await this.down(key, options);\n    if (delay) {\n      await new Promise(f => {\n        return setTimeout(f, options.delay);\n      });\n    }\n    await this.up(key);\n  }\n}\n_Keyboard_client = new WeakMap(), _Keyboard_pressedKeys = new WeakMap(), _Keyboard_instances = new WeakSet(), _Keyboard_modifierBit = function _Keyboard_modifierBit(key) {\n  if (key === 'Alt') {\n    return 1;\n  }\n  if (key === 'Control') {\n    return 2;\n  }\n  if (key === 'Meta') {\n    return 4;\n  }\n  if (key === 'Shift') {\n    return 8;\n  }\n  return 0;\n}, _Keyboard_keyDescriptionForString = function _Keyboard_keyDescriptionForString(keyString) {\n  const shift = this._modifiers & 8;\n  const description = {\n    key: '',\n    keyCode: 0,\n    code: '',\n    text: '',\n    location: 0\n  };\n  const definition = _keyDefinitions[keyString];\n  assert(definition, `Unknown key: \"${keyString}\"`);\n  if (definition.key) {\n    description.key = definition.key;\n  }\n  if (shift && definition.shiftKey) {\n    description.key = definition.shiftKey;\n  }\n  if (definition.keyCode) {\n    description.keyCode = definition.keyCode;\n  }\n  if (shift && definition.shiftKeyCode) {\n    description.keyCode = definition.shiftKeyCode;\n  }\n  if (definition.code) {\n    description.code = definition.code;\n  }\n  if (definition.location) {\n    description.location = definition.location;\n  }\n  if (description.key.length === 1) {\n    description.text = description.key;\n  }\n  if (definition.text) {\n    description.text = definition.text;\n  }\n  if (shift && definition.shiftText) {\n    description.text = definition.shiftText;\n  }\n  // if any modifiers besides shift are pressed, no text should be sent\n  if (this._modifiers & ~8) {\n    description.text = '';\n  }\n  return description;\n};\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n *\n * ```ts\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n *\n * ```ts\n * await page.evaluate(\n *   (from, to) => {\n *     const selection = from.getRootNode().getSelection();\n *     const range = document.createRange();\n *     range.setStartBefore(from);\n *     range.setEndAfter(to);\n *     selection.removeAllRanges();\n *     selection.addRange(range);\n *   },\n *   fromJSHandle,\n *   toJSHandle\n * );\n * ```\n *\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n *\n * ```ts\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n *\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n *\n * ```ts\n * await browser\n *   .defaultBrowserContext()\n *   .overridePermissions('<your origin>', [\n *     'clipboard-read',\n *     'clipboard-write',\n *   ]);\n * ```\n *\n * @public\n */\nexport class Mouse {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    _Mouse_client.set(this, void 0);\n    _Mouse_keyboard.set(this, void 0);\n    _Mouse_x.set(this, 0);\n    _Mouse_y.set(this, 0);\n    _Mouse_button.set(this, 'none');\n    __classPrivateFieldSet(this, _Mouse_client, client, \"f\");\n    __classPrivateFieldSet(this, _Mouse_keyboard, keyboard, \"f\");\n  }\n  /**\n   * Dispatches a `mousemove` event.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional object. If specified, the `steps` property\n   * sends intermediate `mousemove` events when set to `1` (default).\n   */\n  async move(x, y) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      steps = 1\n    } = options;\n    const fromX = __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n      fromY = __classPrivateFieldGet(this, _Mouse_y, \"f\");\n    __classPrivateFieldSet(this, _Mouse_x, x, \"f\");\n    __classPrivateFieldSet(this, _Mouse_y, y, \"f\");\n    for (let i = 1; i <= steps; i++) {\n      await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n        type: 'mouseMoved',\n        button: __classPrivateFieldGet(this, _Mouse_button, \"f\"),\n        x: fromX + (__classPrivateFieldGet(this, _Mouse_x, \"f\") - fromX) * (i / steps),\n        y: fromY + (__classPrivateFieldGet(this, _Mouse_y, \"f\") - fromY) * (i / steps),\n        modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers\n      });\n    }\n  }\n  /**\n   * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional `MouseOptions`.\n   */\n  async click(x, y) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      delay = null\n    } = options;\n    await this.move(x, y);\n    await this.down(options);\n    if (delay !== null) {\n      await new Promise(f => {\n        return setTimeout(f, delay);\n      });\n    }\n    await this.up(options);\n  }\n  /**\n   * Dispatches a `mousedown` event.\n   * @param options - Optional `MouseOptions`.\n   */\n  async down() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      button = 'left',\n      clickCount = 1\n    } = options;\n    __classPrivateFieldSet(this, _Mouse_button, button, \"f\");\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n      type: 'mousePressed',\n      button,\n      x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n      y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      clickCount\n    });\n  }\n  /**\n   * Dispatches a `mouseup` event.\n   * @param options - Optional `MouseOptions`.\n   */\n  async up() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      button = 'left',\n      clickCount = 1\n    } = options;\n    __classPrivateFieldSet(this, _Mouse_button, 'none', \"f\");\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n      type: 'mouseReleased',\n      button,\n      x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n      y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      clickCount\n    });\n  }\n  /**\n   * Dispatches a `mousewheel` event.\n   * @param options - Optional: `MouseWheelOptions`.\n   *\n   * @example\n   * An example of zooming into an element:\n   *\n   * ```ts\n   * await page.goto(\n   *   'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366'\n   * );\n   *\n   * const elem = await page.$('div');\n   * const boundingBox = await elem.boundingBox();\n   * await page.mouse.move(\n   *   boundingBox.x + boundingBox.width / 2,\n   *   boundingBox.y + boundingBox.height / 2\n   * );\n   *\n   * await page.mouse.wheel({deltaY: -100});\n   * ```\n   */\n  async wheel() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      deltaX = 0,\n      deltaY = 0\n    } = options;\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n      type: 'mouseWheel',\n      x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n      y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n      deltaX,\n      deltaY,\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      pointerType: 'mouse'\n    });\n  }\n  /**\n   * Dispatches a `drag` event.\n   * @param start - starting point for drag\n   * @param target - point to drag to\n   */\n  async drag(start, target) {\n    const promise = new Promise(resolve => {\n      __classPrivateFieldGet(this, _Mouse_client, \"f\").once('Input.dragIntercepted', event => {\n        return resolve(event.data);\n      });\n    });\n    await this.move(start.x, start.y);\n    await this.down();\n    await this.move(target.x, target.y);\n    return promise;\n  }\n  /**\n   * Dispatches a `dragenter` event.\n   * @param target - point for emitting `dragenter` event\n   * @param data - drag data containing items and operations mask\n   */\n  async dragEnter(target, data) {\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n      type: 'dragEnter',\n      x: target.x,\n      y: target.y,\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      data\n    });\n  }\n  /**\n   * Dispatches a `dragover` event.\n   * @param target - point for emitting `dragover` event\n   * @param data - drag data containing items and operations mask\n   */\n  async dragOver(target, data) {\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n      type: 'dragOver',\n      x: target.x,\n      y: target.y,\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      data\n    });\n  }\n  /**\n   * Performs a dragenter, dragover, and drop in sequence.\n   * @param target - point to drop on\n   * @param data - drag data containing items and operations mask\n   */\n  async drop(target, data) {\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n      type: 'drop',\n      x: target.x,\n      y: target.y,\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      data\n    });\n  }\n  /**\n   * Performs a drag, dragenter, dragover, and drop in sequence.\n   * @param start - point to drag from\n   * @param target - point to drop on\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n   * Defaults to 0.\n   */\n  async dragAndDrop(start, target) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      delay = null\n    } = options;\n    const data = await this.drag(start, target);\n    await this.dragEnter(target, data);\n    await this.dragOver(target, data);\n    if (delay) {\n      await new Promise(resolve => {\n        return setTimeout(resolve, delay);\n      });\n    }\n    await this.drop(target, data);\n    await this.up();\n  }\n}\n_Mouse_client = new WeakMap(), _Mouse_keyboard = new WeakMap(), _Mouse_x = new WeakMap(), _Mouse_y = new WeakMap(), _Mouse_button = new WeakMap();\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nexport class Touchscreen {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    _Touchscreen_client.set(this, void 0);\n    _Touchscreen_keyboard.set(this, void 0);\n    __classPrivateFieldSet(this, _Touchscreen_client, client, \"f\");\n    __classPrivateFieldSet(this, _Touchscreen_keyboard, keyboard, \"f\");\n  }\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  async tap(x, y) {\n    await this.touchStart(x, y);\n    await this.touchEnd();\n  }\n  /**\n   * Dispatches a `touchstart` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  async touchStart(x, y) {\n    const touchPoints = [{\n      x: Math.round(x),\n      y: Math.round(y)\n    }];\n    await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n      type: 'touchStart',\n      touchPoints,\n      modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers\n    });\n  }\n  /**\n   * Dispatches a `touchMove` event.\n   * @param x - Horizontal position of the move.\n   * @param y - Vertical position of the move.\n   */\n  async touchMove(x, y) {\n    const movePoints = [{\n      x: Math.round(x),\n      y: Math.round(y)\n    }];\n    await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n      type: 'touchMove',\n      touchPoints: movePoints,\n      modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers\n    });\n  }\n  /**\n   * Dispatches a `touchend` event.\n   */\n  async touchEnd() {\n    await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n      type: 'touchEnd',\n      touchPoints: [],\n      modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers\n    });\n  }\n}\n_Touchscreen_client = new WeakMap(), _Touchscreen_keyboard = new WeakMap();","map":{"version":3,"names":["assert","_keyDefinitions","Keyboard","constructor","client","_Keyboard_client","set","_Keyboard_pressedKeys","Set","_modifiers","__classPrivateFieldSet","down","key","options","arguments","length","undefined","text","commands","description","__classPrivateFieldGet","_Keyboard_instances","_Keyboard_keyDescriptionForString","call","autoRepeat","has","code","add","_Keyboard_modifierBit","send","type","modifiers","windowsVirtualKeyCode","keyCode","unmodifiedText","location","isKeypad","up","delete","sendCharacter","char","charIsKey","delay","press","Promise","f","setTimeout","keyString","shift","definition","shiftKey","shiftKeyCode","shiftText","Mouse","keyboard","_Mouse_client","_Mouse_keyboard","_Mouse_x","_Mouse_y","_Mouse_button","move","x","y","steps","fromX","fromY","i","button","click","clickCount","wheel","deltaX","deltaY","pointerType","drag","start","target","promise","resolve","once","event","data","dragEnter","dragOver","drop","dragAndDrop","Touchscreen","_Touchscreen_client","_Touchscreen_keyboard","tap","touchStart","touchEnd","touchPoints","Math","round","touchMove","movePoints"],"sources":["../../../../src/common/Input.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,SAAQA,MAAM,QAAO,mBAAmB;AAGxC,SAAQC,eAAe,QAAgC,uBAAuB;AAM9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,OAAM,MAAOC,QAAQ;EASnB;;;EAGAC,YAAYC,MAAkB;;IAX9BC,gBAAA,CAAAC,GAAA;IACAC,qBAAA,CAAAD,GAAA,OAAe,IAAIE,GAAG,EAAU;IAEhC;;;IAGA,KAAAC,UAAU,GAAG,CAAC;IAMZC,sBAAA,KAAI,EAAAL,gBAAA,EAAWD,MAAM;EACvB;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BA,MAAMO,IAAIA,CACRC,GAAa,EAIZ;IAAA,IAHDC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgD;MAC9CG,IAAI,EAAED,SAAS;MACfE,QAAQ,EAAE;KACX;IAED,MAAMC,WAAW,GAAGC,sBAAA,KAAI,EAAAC,mBAAA,OAAAC,iCAAA,CAAyB,CAAAC,IAAA,CAA7B,IAAI,EAA0BX,GAAG,CAAC;IAEtD,MAAMY,UAAU,GAAGJ,sBAAA,KAAI,EAAAb,qBAAA,MAAa,CAACkB,GAAG,CAACN,WAAW,CAACO,IAAI,CAAC;IAC1DN,sBAAA,KAAI,EAAAb,qBAAA,MAAa,CAACoB,GAAG,CAACR,WAAW,CAACO,IAAI,CAAC;IACvC,IAAI,CAACjB,UAAU,IAAIW,sBAAA,KAAI,EAAAC,mBAAA,OAAAO,qBAAA,CAAa,CAAAL,IAAA,CAAjB,IAAI,EAAcJ,WAAW,CAACP,GAAG,CAAC;IAErD,MAAMK,IAAI,GAAGJ,OAAO,CAACI,IAAI,KAAKD,SAAS,GAAGG,WAAW,CAACF,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACzE,MAAMG,sBAAA,KAAI,EAAAf,gBAAA,MAAQ,CAACwB,IAAI,CAAC,wBAAwB,EAAE;MAChDC,IAAI,EAAEb,IAAI,GAAG,SAAS,GAAG,YAAY;MACrCc,SAAS,EAAE,IAAI,CAACtB,UAAU;MAC1BuB,qBAAqB,EAAEb,WAAW,CAACc,OAAO;MAC1CP,IAAI,EAAEP,WAAW,CAACO,IAAI;MACtBd,GAAG,EAAEO,WAAW,CAACP,GAAG;MACpBK,IAAI,EAAEA,IAAI;MACViB,cAAc,EAAEjB,IAAI;MACpBO,UAAU;MACVW,QAAQ,EAAEhB,WAAW,CAACgB,QAAQ;MAC9BC,QAAQ,EAAEjB,WAAW,CAACgB,QAAQ,KAAK,CAAC;MACpCjB,QAAQ,EAAEL,OAAO,CAACK;KACnB,CAAC;EACJ;EAwEA;;;;;;;EAOA,MAAMmB,EAAEA,CAACzB,GAAa;IACpB,MAAMO,WAAW,GAAGC,sBAAA,KAAI,EAAAC,mBAAA,OAAAC,iCAAA,CAAyB,CAAAC,IAAA,CAA7B,IAAI,EAA0BX,GAAG,CAAC;IAEtD,IAAI,CAACH,UAAU,IAAI,CAACW,sBAAA,KAAI,EAAAC,mBAAA,OAAAO,qBAAA,CAAa,CAAAL,IAAA,CAAjB,IAAI,EAAcJ,WAAW,CAACP,GAAG,CAAC;IACtDQ,sBAAA,KAAI,EAAAb,qBAAA,MAAa,CAAC+B,MAAM,CAACnB,WAAW,CAACO,IAAI,CAAC;IAC1C,MAAMN,sBAAA,KAAI,EAAAf,gBAAA,MAAQ,CAACwB,IAAI,CAAC,wBAAwB,EAAE;MAChDC,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE,IAAI,CAACtB,UAAU;MAC1BG,GAAG,EAAEO,WAAW,CAACP,GAAG;MACpBoB,qBAAqB,EAAEb,WAAW,CAACc,OAAO;MAC1CP,IAAI,EAAEP,WAAW,CAACO,IAAI;MACtBS,QAAQ,EAAEhB,WAAW,CAACgB;KACvB,CAAC;EACJ;EAEA;;;;;;;;;;;;;;;;EAgBA,MAAMI,aAAaA,CAACC,IAAY;IAC9B,MAAMpB,sBAAA,KAAI,EAAAf,gBAAA,MAAQ,CAACwB,IAAI,CAAC,kBAAkB,EAAE;MAACZ,IAAI,EAAEuB;IAAI,CAAC,CAAC;EAC3D;EAEQC,SAASA,CAACD,IAAY;IAC5B,OAAO,CAAC,CAACvC,eAAe,CAACuC,IAAgB,CAAC;EAC5C;EAEA;;;;;;;;;;;;;;;;;;;;;;;EAuBA,MAAMV,IAAIA,CAACb,IAAY,EAAgC;IAAA,IAA9BJ,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,EAAE;IACrD,MAAM4B,KAAK,GAAG7B,OAAO,CAAC6B,KAAK,IAAI1B,SAAS;IACxC,KAAK,MAAMwB,IAAI,IAAIvB,IAAI,EAAE;MACvB,IAAI,IAAI,CAACwB,SAAS,CAACD,IAAI,CAAC,EAAE;QACxB,MAAM,IAAI,CAACG,KAAK,CAACH,IAAI,EAAE;UAACE;QAAK,CAAC,CAAC;OAChC,MAAM;QACL,IAAIA,KAAK,EAAE;UACT,MAAM,IAAIE,OAAO,CAACC,CAAC,IAAG;YACpB,OAAOC,UAAU,CAACD,CAAC,EAAEH,KAAK,CAAC;UAC7B,CAAC,CAAC;;QAEJ,MAAM,IAAI,CAACH,aAAa,CAACC,IAAI,CAAC;;;EAGpC;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBA,MAAMG,KAAKA,CACT/B,GAAa,EACqD;IAAA,IAAlEC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgE,EAAE;IAElE,MAAM;MAAC4B,KAAK,GAAG;IAAI,CAAC,GAAG7B,OAAO;IAC9B,MAAM,IAAI,CAACF,IAAI,CAACC,GAAG,EAAEC,OAAO,CAAC;IAC7B,IAAI6B,KAAK,EAAE;MACT,MAAM,IAAIE,OAAO,CAACC,CAAC,IAAG;QACpB,OAAOC,UAAU,CAACD,CAAC,EAAEhC,OAAO,CAAC6B,KAAK,CAAC;MACrC,CAAC,CAAC;;IAEJ,MAAM,IAAI,CAACL,EAAE,CAACzB,GAAG,CAAC;EACpB;;qKA7LaA,GAAW;EACtB,IAAIA,GAAG,KAAK,KAAK,EAAE;IACjB,OAAO,CAAC;;EAEV,IAAIA,GAAG,KAAK,SAAS,EAAE;IACrB,OAAO,CAAC;;EAEV,IAAIA,GAAG,KAAK,MAAM,EAAE;IAClB,OAAO,CAAC;;EAEV,IAAIA,GAAG,KAAK,OAAO,EAAE;IACnB,OAAO,CAAC;;EAEV,OAAO,CAAC;AACV,CAAC,EAAAU,iCAAA,YAAAA,kCAEwByB,SAAmB;EAC1C,MAAMC,KAAK,GAAG,IAAI,CAACvC,UAAU,GAAG,CAAC;EACjC,MAAMU,WAAW,GAAG;IAClBP,GAAG,EAAE,EAAE;IACPqB,OAAO,EAAE,CAAC;IACVP,IAAI,EAAE,EAAE;IACRT,IAAI,EAAE,EAAE;IACRkB,QAAQ,EAAE;GACX;EAED,MAAMc,UAAU,GAAGhD,eAAe,CAAC8C,SAAS,CAAC;EAC7C/C,MAAM,CAACiD,UAAU,EAAE,iBAAiBF,SAAS,GAAG,CAAC;EAEjD,IAAIE,UAAU,CAACrC,GAAG,EAAE;IAClBO,WAAW,CAACP,GAAG,GAAGqC,UAAU,CAACrC,GAAG;;EAElC,IAAIoC,KAAK,IAAIC,UAAU,CAACC,QAAQ,EAAE;IAChC/B,WAAW,CAACP,GAAG,GAAGqC,UAAU,CAACC,QAAQ;;EAGvC,IAAID,UAAU,CAAChB,OAAO,EAAE;IACtBd,WAAW,CAACc,OAAO,GAAGgB,UAAU,CAAChB,OAAO;;EAE1C,IAAIe,KAAK,IAAIC,UAAU,CAACE,YAAY,EAAE;IACpChC,WAAW,CAACc,OAAO,GAAGgB,UAAU,CAACE,YAAY;;EAG/C,IAAIF,UAAU,CAACvB,IAAI,EAAE;IACnBP,WAAW,CAACO,IAAI,GAAGuB,UAAU,CAACvB,IAAI;;EAGpC,IAAIuB,UAAU,CAACd,QAAQ,EAAE;IACvBhB,WAAW,CAACgB,QAAQ,GAAGc,UAAU,CAACd,QAAQ;;EAG5C,IAAIhB,WAAW,CAACP,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;IAChCI,WAAW,CAACF,IAAI,GAAGE,WAAW,CAACP,GAAG;;EAGpC,IAAIqC,UAAU,CAAChC,IAAI,EAAE;IACnBE,WAAW,CAACF,IAAI,GAAGgC,UAAU,CAAChC,IAAI;;EAEpC,IAAI+B,KAAK,IAAIC,UAAU,CAACG,SAAS,EAAE;IACjCjC,WAAW,CAACF,IAAI,GAAGgC,UAAU,CAACG,SAAS;;EAGzC;EACA,IAAI,IAAI,CAAC3C,UAAU,GAAG,CAAC,CAAC,EAAE;IACxBU,WAAW,CAACF,IAAI,GAAG,EAAE;;EAGvB,OAAOE,WAAW;AACpB,CAAC;AAiJH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA,OAAM,MAAOkC,KAAK;EAOhB;;;EAGAlD,YAAYC,MAAkB,EAAEkD,QAAkB;IATlDC,aAAA,CAAAjD,GAAA;IACAkD,eAAA,CAAAlD,GAAA;IACAmD,QAAA,CAAAnD,GAAA,OAAK,CAAC;IACNoD,QAAA,CAAApD,GAAA,OAAK,CAAC;IACNqD,aAAA,CAAArD,GAAA,OAAgC,MAAM;IAMpCI,sBAAA,KAAI,EAAA6C,aAAA,EAAWnD,MAAM;IACrBM,sBAAA,KAAI,EAAA8C,eAAA,EAAaF,QAAQ;EAC3B;EAEA;;;;;;;EAOA,MAAMM,IAAIA,CACRC,CAAS,EACTC,CAAS,EACqB;IAAA,IAA9BjD,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,EAAE;IAE9B,MAAM;MAACiD,KAAK,GAAG;IAAC,CAAC,GAAGlD,OAAO;IAC3B,MAAMmD,KAAK,GAAG5C,sBAAA,KAAI,EAAAqC,QAAA,MAAG;MACnBQ,KAAK,GAAG7C,sBAAA,KAAI,EAAAsC,QAAA,MAAG;IACjBhD,sBAAA,KAAI,EAAA+C,QAAA,EAAMI,CAAC;IACXnD,sBAAA,KAAI,EAAAgD,QAAA,EAAMI,CAAC;IACX,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,KAAK,EAAEG,CAAC,EAAE,EAAE;MAC/B,MAAM9C,sBAAA,KAAI,EAAAmC,aAAA,MAAQ,CAAC1B,IAAI,CAAC,0BAA0B,EAAE;QAClDC,IAAI,EAAE,YAAY;QAClBqC,MAAM,EAAE/C,sBAAA,KAAI,EAAAuC,aAAA,MAAQ;QACpBE,CAAC,EAAEG,KAAK,GAAG,CAAC5C,sBAAA,KAAI,EAAAqC,QAAA,MAAG,GAAGO,KAAK,KAAKE,CAAC,GAAGH,KAAK,CAAC;QAC1CD,CAAC,EAAEG,KAAK,GAAG,CAAC7C,sBAAA,KAAI,EAAAsC,QAAA,MAAG,GAAGO,KAAK,KAAKC,CAAC,GAAGH,KAAK,CAAC;QAC1ChC,SAAS,EAAEX,sBAAA,KAAI,EAAAoC,eAAA,MAAU,CAAC/C;OAC3B,CAAC;;EAEN;EAEA;;;;;;EAMA,MAAM2D,KAAKA,CACTP,CAAS,EACTC,CAAS,EACoC;IAAA,IAA7CjD,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2C,EAAE;IAE7C,MAAM;MAAC4B,KAAK,GAAG;IAAI,CAAC,GAAG7B,OAAO;IAC9B,MAAM,IAAI,CAAC+C,IAAI,CAACC,CAAC,EAAEC,CAAC,CAAC;IACrB,MAAM,IAAI,CAACnD,IAAI,CAACE,OAAO,CAAC;IACxB,IAAI6B,KAAK,KAAK,IAAI,EAAE;MAClB,MAAM,IAAIE,OAAO,CAACC,CAAC,IAAG;QACpB,OAAOC,UAAU,CAACD,CAAC,EAAEH,KAAK,CAAC;MAC7B,CAAC,CAAC;;IAEJ,MAAM,IAAI,CAACL,EAAE,CAACxB,OAAO,CAAC;EACxB;EAEA;;;;EAIA,MAAMF,IAAIA,CAAA,EAA2B;IAAA,IAA1BE,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwB,EAAE;IACnC,MAAM;MAACqD,MAAM,GAAG,MAAM;MAAEE,UAAU,GAAG;IAAC,CAAC,GAAGxD,OAAO;IACjDH,sBAAA,KAAI,EAAAiD,aAAA,EAAWQ,MAAM;IACrB,MAAM/C,sBAAA,KAAI,EAAAmC,aAAA,MAAQ,CAAC1B,IAAI,CAAC,0BAA0B,EAAE;MAClDC,IAAI,EAAE,cAAc;MACpBqC,MAAM;MACNN,CAAC,EAAEzC,sBAAA,KAAI,EAAAqC,QAAA,MAAG;MACVK,CAAC,EAAE1C,sBAAA,KAAI,EAAAsC,QAAA,MAAG;MACV3B,SAAS,EAAEX,sBAAA,KAAI,EAAAoC,eAAA,MAAU,CAAC/C,UAAU;MACpC4D;KACD,CAAC;EACJ;EAEA;;;;EAIA,MAAMhC,EAAEA,CAAA,EAA2B;IAAA,IAA1BxB,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwB,EAAE;IACjC,MAAM;MAACqD,MAAM,GAAG,MAAM;MAAEE,UAAU,GAAG;IAAC,CAAC,GAAGxD,OAAO;IACjDH,sBAAA,KAAI,EAAAiD,aAAA,EAAW,MAAM;IACrB,MAAMvC,sBAAA,KAAI,EAAAmC,aAAA,MAAQ,CAAC1B,IAAI,CAAC,0BAA0B,EAAE;MAClDC,IAAI,EAAE,eAAe;MACrBqC,MAAM;MACNN,CAAC,EAAEzC,sBAAA,KAAI,EAAAqC,QAAA,MAAG;MACVK,CAAC,EAAE1C,sBAAA,KAAI,EAAAsC,QAAA,MAAG;MACV3B,SAAS,EAAEX,sBAAA,KAAI,EAAAoC,eAAA,MAAU,CAAC/C,UAAU;MACpC4D;KACD,CAAC;EACJ;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBA,MAAMC,KAAKA,CAAA,EAAgC;IAAA,IAA/BzD,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,EAAE;IACzC,MAAM;MAACyD,MAAM,GAAG,CAAC;MAAEC,MAAM,GAAG;IAAC,CAAC,GAAG3D,OAAO;IACxC,MAAMO,sBAAA,KAAI,EAAAmC,aAAA,MAAQ,CAAC1B,IAAI,CAAC,0BAA0B,EAAE;MAClDC,IAAI,EAAE,YAAY;MAClB+B,CAAC,EAAEzC,sBAAA,KAAI,EAAAqC,QAAA,MAAG;MACVK,CAAC,EAAE1C,sBAAA,KAAI,EAAAsC,QAAA,MAAG;MACVa,MAAM;MACNC,MAAM;MACNzC,SAAS,EAAEX,sBAAA,KAAI,EAAAoC,eAAA,MAAU,CAAC/C,UAAU;MACpCgE,WAAW,EAAE;KACd,CAAC;EACJ;EAEA;;;;;EAKA,MAAMC,IAAIA,CAACC,KAAY,EAAEC,MAAa;IACpC,MAAMC,OAAO,GAAG,IAAIjC,OAAO,CAA0BkC,OAAO,IAAG;MAC7D1D,sBAAA,KAAI,EAAAmC,aAAA,MAAQ,CAACwB,IAAI,CAAC,uBAAuB,EAAEC,KAAK,IAAG;QACjD,OAAOF,OAAO,CAACE,KAAK,CAACC,IAAI,CAAC;MAC5B,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,MAAM,IAAI,CAACrB,IAAI,CAACe,KAAK,CAACd,CAAC,EAAEc,KAAK,CAACb,CAAC,CAAC;IACjC,MAAM,IAAI,CAACnD,IAAI,EAAE;IACjB,MAAM,IAAI,CAACiD,IAAI,CAACgB,MAAM,CAACf,CAAC,EAAEe,MAAM,CAACd,CAAC,CAAC;IACnC,OAAOe,OAAO;EAChB;EAEA;;;;;EAKA,MAAMK,SAASA,CAACN,MAAa,EAAEK,IAA6B;IAC1D,MAAM7D,sBAAA,KAAI,EAAAmC,aAAA,MAAQ,CAAC1B,IAAI,CAAC,yBAAyB,EAAE;MACjDC,IAAI,EAAE,WAAW;MACjB+B,CAAC,EAAEe,MAAM,CAACf,CAAC;MACXC,CAAC,EAAEc,MAAM,CAACd,CAAC;MACX/B,SAAS,EAAEX,sBAAA,KAAI,EAAAoC,eAAA,MAAU,CAAC/C,UAAU;MACpCwE;KACD,CAAC;EACJ;EAEA;;;;;EAKA,MAAME,QAAQA,CAACP,MAAa,EAAEK,IAA6B;IACzD,MAAM7D,sBAAA,KAAI,EAAAmC,aAAA,MAAQ,CAAC1B,IAAI,CAAC,yBAAyB,EAAE;MACjDC,IAAI,EAAE,UAAU;MAChB+B,CAAC,EAAEe,MAAM,CAACf,CAAC;MACXC,CAAC,EAAEc,MAAM,CAACd,CAAC;MACX/B,SAAS,EAAEX,sBAAA,KAAI,EAAAoC,eAAA,MAAU,CAAC/C,UAAU;MACpCwE;KACD,CAAC;EACJ;EAEA;;;;;EAKA,MAAMG,IAAIA,CAACR,MAAa,EAAEK,IAA6B;IACrD,MAAM7D,sBAAA,KAAI,EAAAmC,aAAA,MAAQ,CAAC1B,IAAI,CAAC,yBAAyB,EAAE;MACjDC,IAAI,EAAE,MAAM;MACZ+B,CAAC,EAAEe,MAAM,CAACf,CAAC;MACXC,CAAC,EAAEc,MAAM,CAACd,CAAC;MACX/B,SAAS,EAAEX,sBAAA,KAAI,EAAAoC,eAAA,MAAU,CAAC/C,UAAU;MACpCwE;KACD,CAAC;EACJ;EAEA;;;;;;;;EAQA,MAAMI,WAAWA,CACfV,KAAY,EACZC,MAAa,EACiB;IAAA,IAA9B/D,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,EAAE;IAE9B,MAAM;MAAC4B,KAAK,GAAG;IAAI,CAAC,GAAG7B,OAAO;IAC9B,MAAMoE,IAAI,GAAG,MAAM,IAAI,CAACP,IAAI,CAACC,KAAK,EAAEC,MAAM,CAAC;IAC3C,MAAM,IAAI,CAACM,SAAS,CAACN,MAAM,EAAEK,IAAI,CAAC;IAClC,MAAM,IAAI,CAACE,QAAQ,CAACP,MAAM,EAAEK,IAAI,CAAC;IACjC,IAAIvC,KAAK,EAAE;MACT,MAAM,IAAIE,OAAO,CAACkC,OAAO,IAAG;QAC1B,OAAOhC,UAAU,CAACgC,OAAO,EAAEpC,KAAK,CAAC;MACnC,CAAC,CAAC;;IAEJ,MAAM,IAAI,CAAC0C,IAAI,CAACR,MAAM,EAAEK,IAAI,CAAC;IAC7B,MAAM,IAAI,CAAC5C,EAAE,EAAE;EACjB;;;AAGF;;;;AAIA,OAAM,MAAOiD,WAAW;EAItB;;;EAGAnF,YAAYC,MAAkB,EAAEkD,QAAkB;IANlDiC,mBAAA,CAAAjF,GAAA;IACAkF,qBAAA,CAAAlF,GAAA;IAMEI,sBAAA,KAAI,EAAA6E,mBAAA,EAAWnF,MAAM;IACrBM,sBAAA,KAAI,EAAA8E,qBAAA,EAAalC,QAAQ;EAC3B;EAEA;;;;;EAKA,MAAMmC,GAAGA,CAAC5B,CAAS,EAAEC,CAAS;IAC5B,MAAM,IAAI,CAAC4B,UAAU,CAAC7B,CAAC,EAAEC,CAAC,CAAC;IAC3B,MAAM,IAAI,CAAC6B,QAAQ,EAAE;EACvB;EAEA;;;;;EAKA,MAAMD,UAAUA,CAAC7B,CAAS,EAAEC,CAAS;IACnC,MAAM8B,WAAW,GAAG,CAAC;MAAC/B,CAAC,EAAEgC,IAAI,CAACC,KAAK,CAACjC,CAAC,CAAC;MAAEC,CAAC,EAAE+B,IAAI,CAACC,KAAK,CAAChC,CAAC;IAAC,CAAC,CAAC;IAC1D,MAAM1C,sBAAA,KAAI,EAAAmE,mBAAA,MAAQ,CAAC1D,IAAI,CAAC,0BAA0B,EAAE;MAClDC,IAAI,EAAE,YAAY;MAClB8D,WAAW;MACX7D,SAAS,EAAEX,sBAAA,KAAI,EAAAoE,qBAAA,MAAU,CAAC/E;KAC3B,CAAC;EACJ;EACA;;;;;EAKA,MAAMsF,SAASA,CAAClC,CAAS,EAAEC,CAAS;IAClC,MAAMkC,UAAU,GAAG,CAAC;MAACnC,CAAC,EAAEgC,IAAI,CAACC,KAAK,CAACjC,CAAC,CAAC;MAAEC,CAAC,EAAE+B,IAAI,CAACC,KAAK,CAAChC,CAAC;IAAC,CAAC,CAAC;IACzD,MAAM1C,sBAAA,KAAI,EAAAmE,mBAAA,MAAQ,CAAC1D,IAAI,CAAC,0BAA0B,EAAE;MAClDC,IAAI,EAAE,WAAW;MACjB8D,WAAW,EAAEI,UAAU;MACvBjE,SAAS,EAAEX,sBAAA,KAAI,EAAAoE,qBAAA,MAAU,CAAC/E;KAC3B,CAAC;EACJ;EACA;;;EAGA,MAAMkF,QAAQA,CAAA;IACZ,MAAMvE,sBAAA,KAAI,EAAAmE,mBAAA,MAAQ,CAAC1D,IAAI,CAAC,0BAA0B,EAAE;MAClDC,IAAI,EAAE,UAAU;MAChB8D,WAAW,EAAE,EAAE;MACf7D,SAAS,EAAEX,sBAAA,KAAI,EAAAoE,qBAAA,MAAU,CAAC/E;KAC3B,CAAC;EACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}