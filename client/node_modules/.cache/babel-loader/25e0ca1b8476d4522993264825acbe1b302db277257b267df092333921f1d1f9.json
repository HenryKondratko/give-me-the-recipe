{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Callback_id, _Callback_error, _Callback_promise, _Callback_timer, _Callback_label, _CallbackRegistry_callbacks, _CallbackRegistry_idGenerator, _Connection_instances, _Connection_url, _Connection_transport, _Connection_delay, _Connection_timeout, _Connection_sessions, _Connection_closed, _Connection_manuallyAttached, _Connection_callbacks, _Connection_onClose, _CDPSessionImpl_sessionId, _CDPSessionImpl_targetType, _CDPSessionImpl_callbacks, _CDPSessionImpl_connection;\nimport { assert } from '../util/assert.js';\nimport { createDeferredPromise } from '../util/util.js';\nimport { debug } from './Debug.js';\nimport { ProtocolError } from './Errors.js';\nimport { EventEmitter } from './EventEmitter.js';\nconst debugProtocolSend = debug('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = debug('puppeteer:protocol:RECV ◀');\n/**\n * Internal events that the Connection class emits.\n *\n * @internal\n */\nexport const ConnectionEmittedEvents = {\n  Disconnected: Symbol('Connection.Disconnected')\n};\n/**\n * @internal\n */\nfunction createIncrementalIdGenerator() {\n  let id = 0;\n  return () => {\n    return ++id;\n  };\n}\n/**\n * @internal\n */\nclass Callback {\n  constructor(id, label, timeout) {\n    _Callback_id.set(this, void 0);\n    _Callback_error.set(this, new ProtocolError());\n    _Callback_promise.set(this, createDeferredPromise());\n    _Callback_timer.set(this, void 0);\n    _Callback_label.set(this, void 0);\n    __classPrivateFieldSet(this, _Callback_id, id, \"f\");\n    __classPrivateFieldSet(this, _Callback_label, label, \"f\");\n    if (timeout) {\n      __classPrivateFieldSet(this, _Callback_timer, setTimeout(() => {\n        __classPrivateFieldGet(this, _Callback_promise, \"f\").reject(rewriteError(__classPrivateFieldGet(this, _Callback_error, \"f\"), `${label} timed out.`));\n      }, timeout), \"f\");\n    }\n  }\n  resolve(value) {\n    clearTimeout(__classPrivateFieldGet(this, _Callback_timer, \"f\"));\n    __classPrivateFieldGet(this, _Callback_promise, \"f\").resolve(value);\n  }\n  reject(error) {\n    clearTimeout(__classPrivateFieldGet(this, _Callback_timer, \"f\"));\n    __classPrivateFieldGet(this, _Callback_promise, \"f\").reject(error);\n  }\n  get id() {\n    return __classPrivateFieldGet(this, _Callback_id, \"f\");\n  }\n  get promise() {\n    return __classPrivateFieldGet(this, _Callback_promise, \"f\");\n  }\n  get error() {\n    return __classPrivateFieldGet(this, _Callback_error, \"f\");\n  }\n  get label() {\n    return __classPrivateFieldGet(this, _Callback_label, \"f\");\n  }\n}\n_Callback_id = new WeakMap(), _Callback_error = new WeakMap(), _Callback_promise = new WeakMap(), _Callback_timer = new WeakMap(), _Callback_label = new WeakMap();\n/**\n * Manages callbacks and their IDs for the protocol request/response communication.\n *\n * @internal\n */\nexport class CallbackRegistry {\n  constructor() {\n    _CallbackRegistry_callbacks.set(this, new Map());\n    _CallbackRegistry_idGenerator.set(this, createIncrementalIdGenerator());\n  }\n  create(label, timeout, request) {\n    const callback = new Callback(__classPrivateFieldGet(this, _CallbackRegistry_idGenerator, \"f\").call(this), label, timeout);\n    __classPrivateFieldGet(this, _CallbackRegistry_callbacks, \"f\").set(callback.id, callback);\n    try {\n      request(callback.id);\n    } catch (error) {\n      // We still throw sync errors synchronously and clean up the scheduled\n      // callback.\n      callback.promise.catch(() => {\n        __classPrivateFieldGet(this, _CallbackRegistry_callbacks, \"f\").delete(callback.id);\n      });\n      callback.reject(error);\n      throw error;\n    }\n    // Must only have sync code up until here.\n    return callback.promise.finally(() => {\n      __classPrivateFieldGet(this, _CallbackRegistry_callbacks, \"f\").delete(callback.id);\n    });\n  }\n  reject(id, message, originalMessage) {\n    const callback = __classPrivateFieldGet(this, _CallbackRegistry_callbacks, \"f\").get(id);\n    if (!callback) {\n      return;\n    }\n    this._reject(callback, message, originalMessage);\n  }\n  _reject(callback, message, originalMessage) {\n    callback.reject(rewriteError(callback.error, `Protocol error (${callback.label}): ${message}`, originalMessage));\n  }\n  resolve(id, value) {\n    const callback = __classPrivateFieldGet(this, _CallbackRegistry_callbacks, \"f\").get(id);\n    if (!callback) {\n      return;\n    }\n    callback.resolve(value);\n  }\n  clear() {\n    for (const callback of __classPrivateFieldGet(this, _CallbackRegistry_callbacks, \"f\").values()) {\n      // TODO: probably we can accept error messages as params.\n      this._reject(callback, 'Target closed');\n    }\n    __classPrivateFieldGet(this, _CallbackRegistry_callbacks, \"f\").clear();\n  }\n}\n_CallbackRegistry_callbacks = new WeakMap(), _CallbackRegistry_idGenerator = new WeakMap();\n/**\n * @public\n */\nexport class Connection extends EventEmitter {\n  constructor(url, transport) {\n    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let timeout = arguments.length > 3 ? arguments[3] : undefined;\n    super();\n    _Connection_instances.add(this);\n    _Connection_url.set(this, void 0);\n    _Connection_transport.set(this, void 0);\n    _Connection_delay.set(this, void 0);\n    _Connection_timeout.set(this, void 0);\n    _Connection_sessions.set(this, new Map());\n    _Connection_closed.set(this, false);\n    _Connection_manuallyAttached.set(this, new Set());\n    _Connection_callbacks.set(this, new CallbackRegistry());\n    __classPrivateFieldSet(this, _Connection_url, url, \"f\");\n    __classPrivateFieldSet(this, _Connection_delay, delay, \"f\");\n    __classPrivateFieldSet(this, _Connection_timeout, timeout !== null && timeout !== void 0 ? timeout : 30000, \"f\");\n    __classPrivateFieldSet(this, _Connection_transport, transport, \"f\");\n    __classPrivateFieldGet(this, _Connection_transport, \"f\").onmessage = this.onMessage.bind(this);\n    __classPrivateFieldGet(this, _Connection_transport, \"f\").onclose = __classPrivateFieldGet(this, _Connection_instances, \"m\", _Connection_onClose).bind(this);\n  }\n  static fromSession(session) {\n    return session.connection();\n  }\n  get timeout() {\n    return __classPrivateFieldGet(this, _Connection_timeout, \"f\");\n  }\n  /**\n   * @internal\n   */\n  get _closed() {\n    return __classPrivateFieldGet(this, _Connection_closed, \"f\");\n  }\n  /**\n   * @internal\n   */\n  get _sessions() {\n    return __classPrivateFieldGet(this, _Connection_sessions, \"f\");\n  }\n  /**\n   * @param sessionId - The session id\n   * @returns The current CDP session if it exists\n   */\n  session(sessionId) {\n    return __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(sessionId) || null;\n  }\n  url() {\n    return __classPrivateFieldGet(this, _Connection_url, \"f\");\n  }\n  send(method) {\n    // There is only ever 1 param arg passed, but the Protocol defines it as an\n    // array of 0 or 1 items See this comment:\n    // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n    // which explains why the protocol defines the params this way for better\n    // type-inference.\n    // So now we check if there are any params or not and deal with them accordingly.\n    const params = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : undefined;\n    return this._rawSend(__classPrivateFieldGet(this, _Connection_callbacks, \"f\"), method, params);\n  }\n  /**\n   * @internal\n   */\n  _rawSend(callbacks, method, params, sessionId) {\n    return callbacks.create(method, __classPrivateFieldGet(this, _Connection_timeout, \"f\"), id => {\n      const stringifiedMessage = JSON.stringify({\n        method,\n        params,\n        id,\n        sessionId\n      });\n      debugProtocolSend(stringifiedMessage);\n      __classPrivateFieldGet(this, _Connection_transport, \"f\").send(stringifiedMessage);\n    });\n  }\n  /**\n   * @internal\n   */\n  async onMessage(message) {\n    if (__classPrivateFieldGet(this, _Connection_delay, \"f\")) {\n      await new Promise(f => {\n        return setTimeout(f, __classPrivateFieldGet(this, _Connection_delay, \"f\"));\n      });\n    }\n    debugProtocolReceive(message);\n    const object = JSON.parse(message);\n    if (object.method === 'Target.attachedToTarget') {\n      const sessionId = object.params.sessionId;\n      const session = new CDPSessionImpl(this, object.params.targetInfo.type, sessionId);\n      __classPrivateFieldGet(this, _Connection_sessions, \"f\").set(sessionId, session);\n      this.emit('sessionattached', session);\n      const parentSession = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(object.sessionId);\n      if (parentSession) {\n        parentSession.emit('sessionattached', session);\n      }\n    } else if (object.method === 'Target.detachedFromTarget') {\n      const session = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(object.params.sessionId);\n      if (session) {\n        session._onClosed();\n        __classPrivateFieldGet(this, _Connection_sessions, \"f\").delete(object.params.sessionId);\n        this.emit('sessiondetached', session);\n        const parentSession = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(object.sessionId);\n        if (parentSession) {\n          parentSession.emit('sessiondetached', session);\n        }\n      }\n    }\n    if (object.sessionId) {\n      const session = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(object.sessionId);\n      if (session) {\n        session._onMessage(object);\n      }\n    } else if (object.id) {\n      if (object.error) {\n        __classPrivateFieldGet(this, _Connection_callbacks, \"f\").reject(object.id, createProtocolErrorMessage(object), object.error.message);\n      } else {\n        __classPrivateFieldGet(this, _Connection_callbacks, \"f\").resolve(object.id, object.result);\n      }\n    } else {\n      this.emit(object.method, object.params);\n    }\n  }\n  dispose() {\n    __classPrivateFieldGet(this, _Connection_instances, \"m\", _Connection_onClose).call(this);\n    __classPrivateFieldGet(this, _Connection_transport, \"f\").close();\n  }\n  /**\n   * @internal\n   */\n  isAutoAttached(targetId) {\n    return !__classPrivateFieldGet(this, _Connection_manuallyAttached, \"f\").has(targetId);\n  }\n  /**\n   * @internal\n   */\n  async _createSession(targetInfo) {\n    let isAutoAttachEmulated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!isAutoAttachEmulated) {\n      __classPrivateFieldGet(this, _Connection_manuallyAttached, \"f\").add(targetInfo.targetId);\n    }\n    const {\n      sessionId\n    } = await this.send('Target.attachToTarget', {\n      targetId: targetInfo.targetId,\n      flatten: true\n    });\n    __classPrivateFieldGet(this, _Connection_manuallyAttached, \"f\").delete(targetInfo.targetId);\n    const session = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(sessionId);\n    if (!session) {\n      throw new Error('CDPSession creation failed.');\n    }\n    return session;\n  }\n  /**\n   * @param targetInfo - The target info\n   * @returns The CDP session that is created\n   */\n  async createSession(targetInfo) {\n    return await this._createSession(targetInfo, false);\n  }\n}\n_Connection_url = new WeakMap(), _Connection_transport = new WeakMap(), _Connection_delay = new WeakMap(), _Connection_timeout = new WeakMap(), _Connection_sessions = new WeakMap(), _Connection_closed = new WeakMap(), _Connection_manuallyAttached = new WeakMap(), _Connection_callbacks = new WeakMap(), _Connection_instances = new WeakSet(), _Connection_onClose = function _Connection_onClose() {\n  if (__classPrivateFieldGet(this, _Connection_closed, \"f\")) {\n    return;\n  }\n  __classPrivateFieldSet(this, _Connection_closed, true, \"f\");\n  __classPrivateFieldGet(this, _Connection_transport, \"f\").onmessage = undefined;\n  __classPrivateFieldGet(this, _Connection_transport, \"f\").onclose = undefined;\n  __classPrivateFieldGet(this, _Connection_callbacks, \"f\").clear();\n  for (const session of __classPrivateFieldGet(this, _Connection_sessions, \"f\").values()) {\n    session._onClosed();\n  }\n  __classPrivateFieldGet(this, _Connection_sessions, \"f\").clear();\n  this.emit(ConnectionEmittedEvents.Disconnected);\n};\n/**\n * Internal events that the CDPSession class emits.\n *\n * @internal\n */\nexport const CDPSessionEmittedEvents = {\n  Disconnected: Symbol('CDPSession.Disconnected')\n};\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/HEAD/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n *\n * ```ts\n * const client = await page.target().createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () =>\n *   console.log('Animation created!')\n * );\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2,\n * });\n * ```\n *\n * @public\n */\nexport class CDPSession extends EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n  connection() {\n    throw new Error('Not implemented');\n  }\n  send() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  async detach() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Returns the session's id.\n   */\n  id() {\n    throw new Error('Not implemented');\n  }\n}\n/**\n * @internal\n */\nexport class CDPSessionImpl extends CDPSession {\n  /**\n   * @internal\n   */\n  constructor(connection, targetType, sessionId) {\n    super();\n    _CDPSessionImpl_sessionId.set(this, void 0);\n    _CDPSessionImpl_targetType.set(this, void 0);\n    _CDPSessionImpl_callbacks.set(this, new CallbackRegistry());\n    _CDPSessionImpl_connection.set(this, void 0);\n    __classPrivateFieldSet(this, _CDPSessionImpl_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPSessionImpl_targetType, targetType, \"f\");\n    __classPrivateFieldSet(this, _CDPSessionImpl_sessionId, sessionId, \"f\");\n  }\n  connection() {\n    return __classPrivateFieldGet(this, _CDPSessionImpl_connection, \"f\");\n  }\n  send(method) {\n    if (!__classPrivateFieldGet(this, _CDPSessionImpl_connection, \"f\")) {\n      return Promise.reject(new Error(`Protocol error (${method}): Session closed. Most likely the ${__classPrivateFieldGet(this, _CDPSessionImpl_targetType, \"f\")} has been closed.`));\n    }\n    // See the comment in Connection#send explaining why we do this.\n    const params = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : undefined;\n    return __classPrivateFieldGet(this, _CDPSessionImpl_connection, \"f\")._rawSend(__classPrivateFieldGet(this, _CDPSessionImpl_callbacks, \"f\"), method, params, __classPrivateFieldGet(this, _CDPSessionImpl_sessionId, \"f\"));\n  }\n  /**\n   * @internal\n   */\n  _onMessage(object) {\n    if (object.id) {\n      if (object.error) {\n        __classPrivateFieldGet(this, _CDPSessionImpl_callbacks, \"f\").reject(object.id, createProtocolErrorMessage(object), object.error.message);\n      } else {\n        __classPrivateFieldGet(this, _CDPSessionImpl_callbacks, \"f\").resolve(object.id, object.result);\n      }\n    } else {\n      assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  async detach() {\n    if (!__classPrivateFieldGet(this, _CDPSessionImpl_connection, \"f\")) {\n      throw new Error(`Session already detached. Most likely the ${__classPrivateFieldGet(this, _CDPSessionImpl_targetType, \"f\")} has been closed.`);\n    }\n    await __classPrivateFieldGet(this, _CDPSessionImpl_connection, \"f\").send('Target.detachFromTarget', {\n      sessionId: __classPrivateFieldGet(this, _CDPSessionImpl_sessionId, \"f\")\n    });\n  }\n  /**\n   * @internal\n   */\n  _onClosed() {\n    __classPrivateFieldGet(this, _CDPSessionImpl_callbacks, \"f\").clear();\n    __classPrivateFieldSet(this, _CDPSessionImpl_connection, undefined, \"f\");\n    this.emit(CDPSessionEmittedEvents.Disconnected);\n  }\n  /**\n   * Returns the session's id.\n   */\n  id() {\n    return __classPrivateFieldGet(this, _CDPSessionImpl_sessionId, \"f\");\n  }\n}\n_CDPSessionImpl_sessionId = new WeakMap(), _CDPSessionImpl_targetType = new WeakMap(), _CDPSessionImpl_callbacks = new WeakMap(), _CDPSessionImpl_connection = new WeakMap();\nfunction createProtocolErrorMessage(object) {\n  let message = `${object.error.message}`;\n  if ('data' in object.error) {\n    message += ` ${object.error.data}`;\n  }\n  return message;\n}\nfunction rewriteError(error, message, originalMessage) {\n  error.message = message;\n  error.originalMessage = originalMessage !== null && originalMessage !== void 0 ? originalMessage : error.originalMessage;\n  return error;\n}\n/**\n * @internal\n */\nexport function isTargetClosedError(err) {\n  return err.message.includes('Target closed') || err.message.includes('Session closed');\n}","map":{"version":3,"names":["assert","createDeferredPromise","debug","ProtocolError","EventEmitter","debugProtocolSend","debugProtocolReceive","ConnectionEmittedEvents","Disconnected","Symbol","createIncrementalIdGenerator","id","Callback","constructor","label","timeout","_Callback_id","set","_Callback_error","_Callback_promise","_Callback_timer","_Callback_label","__classPrivateFieldSet","setTimeout","__classPrivateFieldGet","reject","rewriteError","resolve","value","clearTimeout","error","promise","CallbackRegistry","_CallbackRegistry_callbacks","Map","_CallbackRegistry_idGenerator","create","request","callback","call","catch","delete","finally","message","originalMessage","get","_reject","clear","values","Connection","url","transport","delay","arguments","length","undefined","_Connection_url","_Connection_transport","_Connection_delay","_Connection_timeout","_Connection_sessions","_Connection_closed","_Connection_manuallyAttached","Set","_Connection_callbacks","onmessage","onMessage","bind","onclose","_Connection_instances","_Connection_onClose","fromSession","session","connection","_closed","_sessions","sessionId","send","method","params","_rawSend","callbacks","stringifiedMessage","JSON","stringify","Promise","f","object","parse","CDPSessionImpl","targetInfo","type","emit","parentSession","_onClosed","_onMessage","createProtocolErrorMessage","result","dispose","close","isAutoAttached","targetId","has","_createSession","isAutoAttachEmulated","add","flatten","Error","createSession","CDPSessionEmittedEvents","CDPSession","detach","targetType","_CDPSessionImpl_sessionId","_CDPSessionImpl_targetType","_CDPSessionImpl_callbacks","_CDPSessionImpl_connection","data","isTargetClosedError","err","includes"],"sources":["../../../../src/common/Connection.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,SAAQA,MAAM,QAAO,mBAAmB;AACxC,SAAQC,qBAAqB,QAAO,iBAAiB;AAGrD,SAAQC,KAAK,QAAO,YAAY;AAChC,SAAQC,aAAa,QAAO,aAAa;AACzC,SAAQC,YAAY,QAAO,mBAAmB;AAE9C,MAAMC,iBAAiB,GAAGH,KAAK,CAAC,2BAA2B,CAAC;AAC5D,MAAMI,oBAAoB,GAAGJ,KAAK,CAAC,2BAA2B,CAAC;AAO/D;;;;;AAKA,OAAO,MAAMK,uBAAuB,GAAG;EACrCC,YAAY,EAAEC,MAAM,CAAC,yBAAyB;CACtC;AAOV;;;AAGA,SAASC,4BAA4BA,CAAA;EACnC,IAAIC,EAAE,GAAG,CAAC;EACV,OAAO,MAAa;IAClB,OAAO,EAAEA,EAAE;EACb,CAAC;AACH;AAEA;;;AAGA,MAAMC,QAAQ;EAOZC,YAAYF,EAAU,EAAEG,KAAa,EAAEC,OAAgB;IANvDC,YAAA,CAAAC,GAAA;IACAC,eAAA,CAAAD,GAAA,OAAS,IAAId,aAAa,EAAE;IAC5BgB,iBAAA,CAAAF,GAAA,OAAWhB,qBAAqB,EAAW;IAC3CmB,eAAA,CAAAH,GAAA;IACAI,eAAA,CAAAJ,GAAA;IAGEK,sBAAA,KAAI,EAAAN,YAAA,EAAOL,EAAE;IACbW,sBAAA,KAAI,EAAAD,eAAA,EAAUP,KAAK;IACnB,IAAIC,OAAO,EAAE;MACXO,sBAAA,KAAI,EAAAF,eAAA,EAAUG,UAAU,CAAC,MAAK;QAC5BC,sBAAA,KAAI,EAAAL,iBAAA,MAAS,CAACM,MAAM,CAACC,YAAY,CAACF,sBAAA,KAAI,EAAAN,eAAA,MAAO,EAAE,GAAGJ,KAAK,aAAa,CAAC,CAAC;MACxE,CAAC,EAAEC,OAAO,CAAC;;EAEf;EAEAY,OAAOA,CAACC,KAAc;IACpBC,YAAY,CAACL,sBAAA,KAAI,EAAAJ,eAAA,MAAO,CAAC;IACzBI,sBAAA,KAAI,EAAAL,iBAAA,MAAS,CAACQ,OAAO,CAACC,KAAK,CAAC;EAC9B;EAEAH,MAAMA,CAACK,KAAY;IACjBD,YAAY,CAACL,sBAAA,KAAI,EAAAJ,eAAA,MAAO,CAAC;IACzBI,sBAAA,KAAI,EAAAL,iBAAA,MAAS,CAACM,MAAM,CAACK,KAAK,CAAC;EAC7B;EAEA,IAAInB,EAAEA,CAAA;IACJ,OAAOa,sBAAA,KAAI,EAAAR,YAAA,MAAI;EACjB;EAEA,IAAIe,OAAOA,CAAA;IACT,OAAOP,sBAAA,KAAI,EAAAL,iBAAA,MAAS;EACtB;EAEA,IAAIW,KAAKA,CAAA;IACP,OAAON,sBAAA,KAAI,EAAAN,eAAA,MAAO;EACpB;EAEA,IAAIJ,KAAKA,CAAA;IACP,OAAOU,sBAAA,KAAI,EAAAH,eAAA,MAAO;EACpB;;;AAGF;;;;;AAKA,OAAM,MAAOW,gBAAgB;EAA7BnB,YAAA;IACEoB,2BAAA,CAAAhB,GAAA,OAAoC,IAAIiB,GAAG,EAAE;IAC7CC,6BAAA,CAAAlB,GAAA,OAAeP,4BAA4B,EAAE;EA2D/C;EAzDE0B,MAAMA,CACJtB,KAAa,EACbC,OAA2B,EAC3BsB,OAA6B;IAE7B,MAAMC,QAAQ,GAAG,IAAI1B,QAAQ,CAACY,sBAAA,KAAI,EAAAW,6BAAA,MAAa,CAAAI,IAAA,CAAjB,IAAI,CAAe,EAAEzB,KAAK,EAAEC,OAAO,CAAC;IAClES,sBAAA,KAAI,EAAAS,2BAAA,MAAW,CAAChB,GAAG,CAACqB,QAAQ,CAAC3B,EAAE,EAAE2B,QAAQ,CAAC;IAC1C,IAAI;MACFD,OAAO,CAACC,QAAQ,CAAC3B,EAAE,CAAC;KACrB,CAAC,OAAOmB,KAAK,EAAE;MACd;MACA;MACAQ,QAAQ,CAACP,OAAO,CAACS,KAAK,CAAC,MAAK;QAC1BhB,sBAAA,KAAI,EAAAS,2BAAA,MAAW,CAACQ,MAAM,CAACH,QAAQ,CAAC3B,EAAE,CAAC;MACrC,CAAC,CAAC;MACF2B,QAAQ,CAACb,MAAM,CAACK,KAAc,CAAC;MAC/B,MAAMA,KAAK;;IAEb;IACA,OAAOQ,QAAQ,CAACP,OAAO,CAACW,OAAO,CAAC,MAAK;MACnClB,sBAAA,KAAI,EAAAS,2BAAA,MAAW,CAACQ,MAAM,CAACH,QAAQ,CAAC3B,EAAE,CAAC;IACrC,CAAC,CAAC;EACJ;EAEAc,MAAMA,CAACd,EAAU,EAAEgC,OAAe,EAAEC,eAAwB;IAC1D,MAAMN,QAAQ,GAAGd,sBAAA,KAAI,EAAAS,2BAAA,MAAW,CAACY,GAAG,CAAClC,EAAE,CAAC;IACxC,IAAI,CAAC2B,QAAQ,EAAE;MACb;;IAEF,IAAI,CAACQ,OAAO,CAACR,QAAQ,EAAEK,OAAO,EAAEC,eAAe,CAAC;EAClD;EAEAE,OAAOA,CAACR,QAAkB,EAAEK,OAAe,EAAEC,eAAwB;IACnEN,QAAQ,CAACb,MAAM,CACbC,YAAY,CACVY,QAAQ,CAACR,KAAK,EACd,mBAAmBQ,QAAQ,CAACxB,KAAK,MAAM6B,OAAO,EAAE,EAChDC,eAAe,CAChB,CACF;EACH;EAEAjB,OAAOA,CAAChB,EAAU,EAAEiB,KAAc;IAChC,MAAMU,QAAQ,GAAGd,sBAAA,KAAI,EAAAS,2BAAA,MAAW,CAACY,GAAG,CAAClC,EAAE,CAAC;IACxC,IAAI,CAAC2B,QAAQ,EAAE;MACb;;IAEFA,QAAQ,CAACX,OAAO,CAACC,KAAK,CAAC;EACzB;EAEAmB,KAAKA,CAAA;IACH,KAAK,MAAMT,QAAQ,IAAId,sBAAA,KAAI,EAAAS,2BAAA,MAAW,CAACe,MAAM,EAAE,EAAE;MAC/C;MACA,IAAI,CAACF,OAAO,CAACR,QAAQ,EAAE,eAAe,CAAC;;IAEzCd,sBAAA,KAAI,EAAAS,2BAAA,MAAW,CAACc,KAAK,EAAE;EACzB;;;AAGF;;;AAGA,OAAM,MAAOE,UAAW,SAAQ7C,YAAY;EAU1CS,YACEqC,GAAW,EACXC,SAA8B,EAEd;IAAA,IADhBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAAA,IACTtC,OAAgB,GAAAsC,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAEhB,KAAK,EAAE;;IAfTC,eAAA,CAAAvC,GAAA;IACAwC,qBAAA,CAAAxC,GAAA;IACAyC,iBAAA,CAAAzC,GAAA;IACA0C,mBAAA,CAAA1C,GAAA;IACA2C,oBAAA,CAAA3C,GAAA,OAAyC,IAAIiB,GAAG,EAAE;IAClD2B,kBAAA,CAAA5C,GAAA,OAAU,KAAK;IACf6C,4BAAA,CAAA7C,GAAA,OAAoB,IAAI8C,GAAG,EAAU;IACrCC,qBAAA,CAAA/C,GAAA,OAAa,IAAIe,gBAAgB,EAAE;IASjCV,sBAAA,KAAI,EAAAkC,eAAA,EAAQN,GAAG;IACf5B,sBAAA,KAAI,EAAAoC,iBAAA,EAAUN,KAAK;IACnB9B,sBAAA,KAAI,EAAAqC,mBAAA,EAAY5C,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,KAAK;IAEhCO,sBAAA,KAAI,EAAAmC,qBAAA,EAAcN,SAAS;IAC3B3B,sBAAA,KAAI,EAAAiC,qBAAA,MAAW,CAACQ,SAAS,GAAG,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;IACrD3C,sBAAA,KAAI,EAAAiC,qBAAA,MAAW,CAACW,OAAO,GAAG5C,sBAAA,KAAI,EAAA6C,qBAAA,OAAAC,mBAAA,CAAS,CAACH,IAAI,CAAC,IAAI,CAAC;EACpD;EAEA,OAAOI,WAAWA,CAACC,OAAmB;IACpC,OAAOA,OAAO,CAACC,UAAU,EAAE;EAC7B;EAEA,IAAI1D,OAAOA,CAAA;IACT,OAAOS,sBAAA,KAAI,EAAAmC,mBAAA,MAAS;EACtB;EAEA;;;EAGA,IAAIe,OAAOA,CAAA;IACT,OAAOlD,sBAAA,KAAI,EAAAqC,kBAAA,MAAQ;EACrB;EAEA;;;EAGA,IAAIc,SAASA,CAAA;IACX,OAAOnD,sBAAA,KAAI,EAAAoC,oBAAA,MAAU;EACvB;EAEA;;;;EAIAY,OAAOA,CAACI,SAAiB;IACvB,OAAOpD,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACf,GAAG,CAAC+B,SAAS,CAAC,IAAI,IAAI;EAC9C;EAEA1B,GAAGA,CAAA;IACD,OAAO1B,sBAAA,KAAI,EAAAgC,eAAA,MAAK;EAClB;EAEAqB,IAAIA,CACFC,MAAS,EAC8C;IAEvD;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,MAAM,GAAG,CAAA1B,SAAA,CAAAC,MAAA,YAAAD,SAAA,CAAAC,MAAA,QAAAD,SAAA,CAAAC,MAAA,QAAAC,SAAA,GAAAF,SAAA,MAAkCE,SAAS;IAC1D,OAAO,IAAI,CAACyB,QAAQ,CAACxD,sBAAA,KAAI,EAAAwC,qBAAA,MAAW,EAAEc,MAAM,EAAEC,MAAM,CAAC;EACvD;EAEA;;;EAGAC,QAAQA,CACNC,SAA2B,EAC3BH,MAAS,EACTC,MAAoD,EACpDH,SAAkB;IAElB,OAAOK,SAAS,CAAC7C,MAAM,CAAC0C,MAAM,EAAEtD,sBAAA,KAAI,EAAAmC,mBAAA,MAAS,EAAEhD,EAAE,IAAG;MAClD,MAAMuE,kBAAkB,GAAGC,IAAI,CAACC,SAAS,CAAC;QACxCN,MAAM;QACNC,MAAM;QACNpE,EAAE;QACFiE;OACD,CAAC;MACFvE,iBAAiB,CAAC6E,kBAAkB,CAAC;MACrC1D,sBAAA,KAAI,EAAAiC,qBAAA,MAAW,CAACoB,IAAI,CAACK,kBAAkB,CAAC;IAC1C,CAAC,CAAuD;EAC1D;EAEA;;;EAGU,MAAMhB,SAASA,CAACvB,OAAe;IACvC,IAAInB,sBAAA,KAAI,EAAAkC,iBAAA,MAAO,EAAE;MACf,MAAM,IAAI2B,OAAO,CAACC,CAAC,IAAG;QACpB,OAAO/D,UAAU,CAAC+D,CAAC,EAAE9D,sBAAA,KAAI,EAAAkC,iBAAA,MAAO,CAAC;MACnC,CAAC,CAAC;;IAEJpD,oBAAoB,CAACqC,OAAO,CAAC;IAC7B,MAAM4C,MAAM,GAAGJ,IAAI,CAACK,KAAK,CAAC7C,OAAO,CAAC;IAClC,IAAI4C,MAAM,CAACT,MAAM,KAAK,yBAAyB,EAAE;MAC/C,MAAMF,SAAS,GAAGW,MAAM,CAACR,MAAM,CAACH,SAAS;MACzC,MAAMJ,OAAO,GAAG,IAAIiB,cAAc,CAChC,IAAI,EACJF,MAAM,CAACR,MAAM,CAACW,UAAU,CAACC,IAAI,EAC7Bf,SAAS,CACV;MACDpD,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAAC3C,GAAG,CAAC2D,SAAS,EAAEJ,OAAO,CAAC;MACtC,IAAI,CAACoB,IAAI,CAAC,iBAAiB,EAAEpB,OAAO,CAAC;MACrC,MAAMqB,aAAa,GAAGrE,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACf,GAAG,CAAC0C,MAAM,CAACX,SAAS,CAAC;MAC1D,IAAIiB,aAAa,EAAE;QACjBA,aAAa,CAACD,IAAI,CAAC,iBAAiB,EAAEpB,OAAO,CAAC;;KAEjD,MAAM,IAAIe,MAAM,CAACT,MAAM,KAAK,2BAA2B,EAAE;MACxD,MAAMN,OAAO,GAAGhD,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACf,GAAG,CAAC0C,MAAM,CAACR,MAAM,CAACH,SAAS,CAAC;MAC3D,IAAIJ,OAAO,EAAE;QACXA,OAAO,CAACsB,SAAS,EAAE;QACnBtE,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACnB,MAAM,CAAC8C,MAAM,CAACR,MAAM,CAACH,SAAS,CAAC;QAC9C,IAAI,CAACgB,IAAI,CAAC,iBAAiB,EAAEpB,OAAO,CAAC;QACrC,MAAMqB,aAAa,GAAGrE,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACf,GAAG,CAAC0C,MAAM,CAACX,SAAS,CAAC;QAC1D,IAAIiB,aAAa,EAAE;UACjBA,aAAa,CAACD,IAAI,CAAC,iBAAiB,EAAEpB,OAAO,CAAC;;;;IAIpD,IAAIe,MAAM,CAACX,SAAS,EAAE;MACpB,MAAMJ,OAAO,GAAGhD,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACf,GAAG,CAAC0C,MAAM,CAACX,SAAS,CAAC;MACpD,IAAIJ,OAAO,EAAE;QACXA,OAAO,CAACuB,UAAU,CAACR,MAAM,CAAC;;KAE7B,MAAM,IAAIA,MAAM,CAAC5E,EAAE,EAAE;MACpB,IAAI4E,MAAM,CAACzD,KAAK,EAAE;QAChBN,sBAAA,KAAI,EAAAwC,qBAAA,MAAW,CAACvC,MAAM,CACpB8D,MAAM,CAAC5E,EAAE,EACTqF,0BAA0B,CAACT,MAAM,CAAC,EAClCA,MAAM,CAACzD,KAAK,CAACa,OAAO,CACrB;OACF,MAAM;QACLnB,sBAAA,KAAI,EAAAwC,qBAAA,MAAW,CAACrC,OAAO,CAAC4D,MAAM,CAAC5E,EAAE,EAAE4E,MAAM,CAACU,MAAM,CAAC;;KAEpD,MAAM;MACL,IAAI,CAACL,IAAI,CAACL,MAAM,CAACT,MAAM,EAAES,MAAM,CAACR,MAAM,CAAC;;EAE3C;EAiBAmB,OAAOA,CAAA;IACL1E,sBAAA,KAAI,EAAA6C,qBAAA,OAAAC,mBAAA,CAAS,CAAA/B,IAAA,CAAb,IAAI,CAAW;IACff,sBAAA,KAAI,EAAAiC,qBAAA,MAAW,CAAC0C,KAAK,EAAE;EACzB;EAEA;;;EAGAC,cAAcA,CAACC,QAAgB;IAC7B,OAAO,CAAC7E,sBAAA,KAAI,EAAAsC,4BAAA,MAAkB,CAACwC,GAAG,CAACD,QAAQ,CAAC;EAC9C;EAEA;;;EAGA,MAAME,cAAcA,CAClBb,UAAsC,EACX;IAAA,IAA3Bc,oBAAoB,GAAAnD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAE3B,IAAI,CAACmD,oBAAoB,EAAE;MACzBhF,sBAAA,KAAI,EAAAsC,4BAAA,MAAkB,CAAC2C,GAAG,CAACf,UAAU,CAACW,QAAQ,CAAC;;IAEjD,MAAM;MAACzB;IAAS,CAAC,GAAG,MAAM,IAAI,CAACC,IAAI,CAAC,uBAAuB,EAAE;MAC3DwB,QAAQ,EAAEX,UAAU,CAACW,QAAQ;MAC7BK,OAAO,EAAE;KACV,CAAC;IACFlF,sBAAA,KAAI,EAAAsC,4BAAA,MAAkB,CAACrB,MAAM,CAACiD,UAAU,CAACW,QAAQ,CAAC;IAClD,MAAM7B,OAAO,GAAGhD,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACf,GAAG,CAAC+B,SAAS,CAAC;IAC7C,IAAI,CAACJ,OAAO,EAAE;MACZ,MAAM,IAAImC,KAAK,CAAC,6BAA6B,CAAC;;IAEhD,OAAOnC,OAAO;EAChB;EAEA;;;;EAIA,MAAMoC,aAAaA,CACjBlB,UAAsC;IAEtC,OAAO,MAAM,IAAI,CAACa,cAAc,CAACb,UAAU,EAAE,KAAK,CAAC;EACrD;;;EAxDE,IAAIlE,sBAAA,KAAI,EAAAqC,kBAAA,MAAQ,EAAE;IAChB;;EAEFvC,sBAAA,KAAI,EAAAuC,kBAAA,EAAW,IAAI;EACnBrC,sBAAA,KAAI,EAAAiC,qBAAA,MAAW,CAACQ,SAAS,GAAGV,SAAS;EACrC/B,sBAAA,KAAI,EAAAiC,qBAAA,MAAW,CAACW,OAAO,GAAGb,SAAS;EACnC/B,sBAAA,KAAI,EAAAwC,qBAAA,MAAW,CAACjB,KAAK,EAAE;EACvB,KAAK,MAAMyB,OAAO,IAAIhD,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACZ,MAAM,EAAE,EAAE;IAC7CwB,OAAO,CAACsB,SAAS,EAAE;;EAErBtE,sBAAA,KAAI,EAAAoC,oBAAA,MAAU,CAACb,KAAK,EAAE;EACtB,IAAI,CAAC6C,IAAI,CAACrF,uBAAuB,CAACC,YAAY,CAAC;AACjD,CAAC;AA0DH;;;;;AAKA,OAAO,MAAMqG,uBAAuB,GAAG;EACrCrG,YAAY,EAAEC,MAAM,CAAC,yBAAyB;CACtC;AAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAM,MAAOqG,UAAW,SAAQ1G,YAAY;EAC1C;;;EAGAS,YAAA;IACE,KAAK,EAAE;EACT;EAEA4D,UAAUA,CAAA;IACR,MAAM,IAAIkC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAMA9B,IAAIA,CAAA;IAGF,MAAM,IAAI8B,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;EAIA,MAAMI,MAAMA,CAAA;IACV,MAAM,IAAIJ,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAhG,EAAEA,CAAA;IACA,MAAM,IAAIgG,KAAK,CAAC,iBAAiB,CAAC;EACpC;;AAGF;;;AAGA,OAAM,MAAOlB,cAAe,SAAQqB,UAAU;EAM5C;;;EAGAjG,YAAY4D,UAAsB,EAAEuC,UAAkB,EAAEpC,SAAiB;IACvE,KAAK,EAAE;IATTqC,yBAAA,CAAAhG,GAAA;IACAiG,0BAAA,CAAAjG,GAAA;IACAkG,yBAAA,CAAAlG,GAAA,OAAa,IAAIe,gBAAgB,EAAE;IACnCoF,0BAAA,CAAAnG,GAAA;IAOEK,sBAAA,KAAI,EAAA8F,0BAAA,EAAe3C,UAAU;IAC7BnD,sBAAA,KAAI,EAAA4F,0BAAA,EAAeF,UAAU;IAC7B1F,sBAAA,KAAI,EAAA2F,yBAAA,EAAcrC,SAAS;EAC7B;EAESH,UAAUA,CAAA;IACjB,OAAOjD,sBAAA,KAAI,EAAA4F,0BAAA,MAAY;EACzB;EAESvC,IAAIA,CACXC,MAAS,EAC8C;IAEvD,IAAI,CAACtD,sBAAA,KAAI,EAAA4F,0BAAA,MAAY,EAAE;MACrB,OAAO/B,OAAO,CAAC5D,MAAM,CACnB,IAAIkF,KAAK,CACP,mBAAmB7B,MAAM,sCACvBtD,sBAAA,KAAI,EAAA0F,0BAAA,MACN,mBAAmB,CACpB,CACF;;IAEH;IACA,MAAMnC,MAAM,GAAG,CAAA1B,SAAA,CAAAC,MAAA,YAAAD,SAAA,CAAAC,MAAA,QAAAD,SAAA,CAAAC,MAAA,QAAAC,SAAA,GAAAF,SAAA,MAAkCE,SAAS;IAC1D,OAAO/B,sBAAA,KAAI,EAAA4F,0BAAA,MAAY,CAACpC,QAAQ,CAC9BxD,sBAAA,KAAI,EAAA2F,yBAAA,MAAW,EACfrC,MAAM,EACNC,MAAM,EACNvD,sBAAA,KAAI,EAAAyF,yBAAA,MAAW,CAChB;EACH;EAEA;;;EAGAlB,UAAUA,CAACR,MAAiC;IAC1C,IAAIA,MAAM,CAAC5E,EAAE,EAAE;MACb,IAAI4E,MAAM,CAACzD,KAAK,EAAE;QAChBN,sBAAA,KAAI,EAAA2F,yBAAA,MAAW,CAAC1F,MAAM,CACpB8D,MAAM,CAAC5E,EAAE,EACTqF,0BAA0B,CAACT,MAAM,CAAC,EAClCA,MAAM,CAACzD,KAAK,CAACa,OAAO,CACrB;OACF,MAAM;QACLnB,sBAAA,KAAI,EAAA2F,yBAAA,MAAW,CAACxF,OAAO,CAAC4D,MAAM,CAAC5E,EAAE,EAAE4E,MAAM,CAACU,MAAM,CAAC;;KAEpD,MAAM;MACLjG,MAAM,CAAC,CAACuF,MAAM,CAAC5E,EAAE,CAAC;MAClB,IAAI,CAACiF,IAAI,CAACL,MAAM,CAACT,MAAM,EAAES,MAAM,CAACR,MAAM,CAAC;;EAE3C;EAEA;;;;EAIS,MAAMgC,MAAMA,CAAA;IACnB,IAAI,CAACvF,sBAAA,KAAI,EAAA4F,0BAAA,MAAY,EAAE;MACrB,MAAM,IAAIT,KAAK,CACb,6CACEnF,sBAAA,KAAI,EAAA0F,0BAAA,MACN,mBAAmB,CACpB;;IAEH,MAAM1F,sBAAA,KAAI,EAAA4F,0BAAA,MAAY,CAACvC,IAAI,CAAC,yBAAyB,EAAE;MACrDD,SAAS,EAAEpD,sBAAA,KAAI,EAAAyF,yBAAA;KAChB,CAAC;EACJ;EAEA;;;EAGAnB,SAASA,CAAA;IACPtE,sBAAA,KAAI,EAAA2F,yBAAA,MAAW,CAACpE,KAAK,EAAE;IACvBzB,sBAAA,KAAI,EAAA8F,0BAAA,EAAe7D,SAAS;IAC5B,IAAI,CAACqC,IAAI,CAACiB,uBAAuB,CAACrG,YAAY,CAAC;EACjD;EAEA;;;EAGSG,EAAEA,CAAA;IACT,OAAOa,sBAAA,KAAI,EAAAyF,yBAAA,MAAW;EACxB;;;AAGF,SAASjB,0BAA0BA,CAACT,MAEnC;EACC,IAAI5C,OAAO,GAAG,GAAG4C,MAAM,CAACzD,KAAK,CAACa,OAAO,EAAE;EACvC,IAAI,MAAM,IAAI4C,MAAM,CAACzD,KAAK,EAAE;IAC1Ba,OAAO,IAAI,IAAI4C,MAAM,CAACzD,KAAK,CAACuF,IAAI,EAAE;;EAEpC,OAAO1E,OAAO;AAChB;AAEA,SAASjB,YAAYA,CACnBI,KAAoB,EACpBa,OAAe,EACfC,eAAwB;EAExBd,KAAK,CAACa,OAAO,GAAGA,OAAO;EACvBb,KAAK,CAACc,eAAe,GAAGA,eAAe,aAAfA,eAAe,cAAfA,eAAe,GAAId,KAAK,CAACc,eAAe;EAChE,OAAOd,KAAK;AACd;AAEA;;;AAGA,OAAM,SAAUwF,mBAAmBA,CAACC,GAAU;EAC5C,OACEA,GAAG,CAAC5E,OAAO,CAAC6E,QAAQ,CAAC,eAAe,CAAC,IACrCD,GAAG,CAAC5E,OAAO,CAAC6E,QAAQ,CAAC,gBAAgB,CAAC;AAE1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}